module lisp 

type Lambda struct 
    Unbound [string]
    Body    'AST

type Value union 
    None       ()
    Identifier string
    Lambda     Lambda

type AST union
    List [AST]
    Atom Value

def (l Lambda) BetaReduce(args &[Value]) AST
    dict = zip(stream(l.Unbound), map(stream(args), (el) => copy(el)))
        then dicts.Collect()

    def impl(ast AST, bound &{string: Value}) AST
        if bound == {}
            return ast 
        match ast
            case List(vals)
                return vals
                    then stream()
                    then map((el) => impl(el, bound))
                    then lists.Collect()
                    then AST.List()
            case Atom(value)
                match value 
                    case None 
                        return Value.None()
                    case Identifier(el)
                        match bound[el]
                            case some(val) 
                                return val
                            case none 
                                return el
                    case Lambda({unbound, body})
                        bound = stream(unbound)
                            then reduce(copy(bound), (bound, el) => delete(bound, el))
                        body = impl(body, bound)
                        return Value.Lambda({unbound, body})
    return impl(l.Body, dict)

type Token union 
    OpenParen     ()
    CloseParen    ()
    Define        () 
    Lambda        ()
    Value         Value

def Tokenize(in |rune|) |Token|
    def tokenizeAlphanum(word string) Token 
        match word 
            case "none"
                return Token.Value.None()
            case "define"
                return Token.Define()
            case "lambda"
                return Token.Lambda()
            case _
                return Token.Value.Identifier(word)
    
    match in 
        case |letter if alphanum(letter), ...rest|
            (str, rest) = strings.TakeWhile(|letter, ...rest|, (el) => isAlphanum(el))
            return |tokenizeAlphanum(str), ...Tokenize(rest)|
        case |'(', ...rest|
            return |Token.OpenParen(), ...Tokenize(rest)|
        case |')', ...rest|
            return |Token.CloseParen(), ...Tokenize(rest)|
        case |' ', ...rest|
            return Tokenize(rest)
        default
            panic("bad char")

def Lex(in |Token|) [AST]
    def list(in |Token|) (AST, token)
        def impl(in |Token|, ast [AST]) (AST, |Token|)   
            match in
                case |Token.OpenParen(), ...rest|
                    (l, rest) = list(rest)
                    return impl(rest, [...ast, l])
                case |Token.CloseParen(), ...rest|
                    return (AST.List(ast), rest)
                case |Token.Value(val), ...rest|
                    return impl(rest, [...ast, AST.Value(val)])
        return impl(in, [])
    match in
        case |Token.OpenParen(), ...rest|
            (first, rest) = list(in)
            return |first, ...Lex(rest)|
        case |Token.CloseParen(), ...rest|
            panic("invalid syntax, closed paren without matching open paren")
        case |Token.Value(value), ...rest|
            return |AST.Value(value), ...Lex(rest)|
        case ||
            return ||

def Eval(ast AST, defines {string: AST}) Value 
    def makeLambda(list [AST]) Lambda
        if len(l) != 3 
            panic("expected three parts for lambda statement, got {} for {}", len(l), l)
        if l[1] is AST.List(ids)
            unbound = map(ids, (el) => 
                match el 
                    case Identifier(id)
                        return id
                    case _
                        panic("Expected all to be ids, but got {}", el) 
            )
            body = l[2]
            return Lambda{unbound, body}
        else
            panic("Expected List of ids!")
    match ast 
        case AST.Value(v):
            return v 
        case AST.List(l):
            match l[0]
                case Define()
                    if len(l) < 3 
                        panic("bad length!")
                    if l[1] is Identifier(id)
                        #TODO: FIGURE OUT HOW THIS WILL WORK
                        
                        name = id 
                        return slices.Sub(l, 2, len(l))
                            then reduce(defines, (defines, el) => Eval())
                           Eval(l[2:], defines)
            l = stream(l)
                then map((el) => Eval(el))
                then lists.Collect()
                then AST.List()
            match l[0]
                case Identifier(id)
                    if id == "lambda"
                        return makeLambda(l)
                    else
                        panic("Unkown identifier {}", id)
                case Lambda(lambda)
                    return Eval(lambda.BetaReduce(l[1:])) #dont think slicing will actually be a feature ALTHOUGH THIS COULD TOTALY SOLVE THE PROBLEM, but I don't think so      
                case _
                    panic("expected lambda function call, got {}", l[0])
