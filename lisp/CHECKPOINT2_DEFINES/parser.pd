module lisp 

import (
    "lists"
    "inplace"
    "dicts"
    "strings"
)

type Lambda struct 
    Unbound [string]
    Body    'AST

type Value union 
    None       ()
    Identifier string
    Lambda     Lambda

type AST union
    List [AST]
    Atom Value

def Substitute(ast AST, bound &{string: Value}) AST 
    if bound == {}
        return ast 
    match ast 
        case AST.List(vals)
            return vals
                then inplace.Map((el) => Substitute(el, bound))
        case AST.Atom(val)
            match val 
                case Value.None()
                    return AST.Atom.None()
                case Value.Identifier(id)
                    match bound[id]
                        case some(val)
                            return AST.Atom(val)
                        case none()
                            return id
                case Lambda({unbound, body})
                    bound = stream(unbound)
                        then reduce(copy(bound), (bound, unbound) => delete(bound, unbound))
                    body = Substitute(body, bound)
                    return AST.Atom.Lambda({body, bound})

def (l Lambda) BetaReduce(args |Value|) AST
    dict = zip(stream(l.Unbound), args)
        then dicts.Collect()
   return Substitute(l.Body, dict)

type Token union 
    OpenParen     ()
    CloseParen    ()
    Define        () 
    Lambda        ()
    Value         Value

def Tokenize(in |rune|) |Token|
    def tokenizeAlphanum(word string) Token 
        match word 
            case "none"
                return Token.Value.None()
            case "define"
                return Token.Define()
            case "lambda"
                return Token.Lambda()
            case _
                return Token.Value.Identifier(word)
    
    match in 
        case |letter if alphanum(letter), ...rest|
            (str, rest) = strings.TakeWhile(|letter, ...rest|, (el) => isAlphanum(el))
            return |tokenizeAlphanum(str), ...Tokenize(rest)|
        case |'(', ...rest|
            return |Token.OpenParen(), ...Tokenize(rest)|
        case |')', ...rest|
            return |Token.CloseParen(), ...Tokenize(rest)|
        case |' ', ...rest|
            return Tokenize(rest)
        default
            panic("bad char")


def Lex(in |Token|) |AST|
    def expect(in |Token|, token Token) |Token|
        match in 
            case |t if t == token, ...rest|
                return rest 
            case |t, ...rest|
                panic("unexpected token {}", t)
            case ||
                panic("unexpected eof")
    def lambdaArgs(in |Token|) ([string], |Token|)
        def impl(in |Token|, out [string]) (|Token|, [string])
            match in 
                case |Token.CloseParen(), ...rest|
                    return (rest, out)
                case |Token.Value.Identifier(id), ...rest|
                    if slices.Contains(out, id)
                        panic("multiple arguments of the same name {}", out)
                    return impl(rest, [...out, id])
                case |el, ...rest|
                    panic("expected identifier, got {}", el)
                case ||
                    panic("unexpected eof")
    def lambdaBody(in |Token|) (AST, |Token|)
        match in
            case |Token.OpenParen(), ...rest|
                (first, rest) = list(in)
                return (first, rest)
            case |Token.CloseParen(), ...rest|
                panic("invalid syntax, closed paren without matching open paren")
            case |Token.Value(value), ...rest|
                return (AST.Value(value), rest)
            case ||
                panic("unexpected eof")
    def list(in |Token|) (AST, token)
        def impl(in |Token|, ast [AST]) (AST, |Token|)   
            match in
                case |Token.OpenParen(), ...rest|
                    (l, rest) = list(rest)
                    return impl(rest, [...ast, l])
                case |Token.CloseParen(), ...rest|
                    return (AST.List(ast), rest)
                case |Token.Lambda(), ...rest|
                    if len(ast) != 0
                        panic("lambda found in middle of arguments")
                    (args, rest) = lambdaArgs(rest)
                    (body, rest) = lambdaBody(rest)
                    rest = expect(rest, Token.CloseParen())
                    return (AST.Atom.Lambda({args, body}), rest)
                case |Token.Value(val), ...rest|
                    return impl(rest, [...ast, AST.Value(val)])
        return impl(in, [])
    match in
        case |Token.OpenParen(), ...rest|
            (first, rest) = list(in)
            return |first, ...Lex(rest)|
        case |Token.CloseParen(), ...rest|
            panic("invalid syntax, closed paren without matching open paren")
        case |Token.Value(value), ...rest|
            return |AST.Value(value), ...Lex(rest)|
        case ||
            return ||

def Eval(ast AST) Value 
    match ast 
        case AST.Value(v):
            return v 
        case AST.List(l):
            l = inplace.Map(l, (el) => Eval(el))
            match l[0]
                case Identifier(id)
                    panic("Unbound identifier {}", id)
                case Lambda(lambda)
                    return Eval(lambda.BetaReduce(slices.StreamFrom(1)))
                case _
                    panic("expected lambda function call, got {}", l[0])
