module lisp

import "big"

type Lambda struct 
    Unbound [string]
    Body    'AST

type Value union
    Identifier string
    String     string 
    Int        int 
    Bool       bool 
    None       ()
    Lambda     Lambda 

type AST union
    List [AST]
    Atom Value

type Token union 
    OpenParen     ()
    CloseParen    ()
    Value         Value

def Tokenize(in |rune|) |Token|
    def tokenizeAlphanum(word string) Token 
        match word 
            case "true"
                return Token.Value.Bool(true)
            case "false"
                return Token.Value.Bool(false)
            case "none"
                return Token.Value.None
            case n if numeric(word)
                return Token.Value.Int(fmt.Parse[big.Int](n))
    def parseString(in |rune|) (string, |rune|) 
        def escape(in |rune|) (rune, |rune|)
            match in 
                case |'n', ...rest|
                    return ('\n', rest)
                case |'r', ...rest|
                    return ('\r', rest)
                case |'t', ...rest|
                    return ('\t', rest)
                case |begin, ...rest|
                    return (begin, rest)
                case ||
                    panic("bad end on escape")
        def impl(in |rune|, out string) (string, |rune|)
            match in
                case |'\\', ...rest|
                    (r, rest) = escape(rest)
                    return impl(rest, out + r)
                case |'"', ...rest|
                    return (out, rest)
                case |letter, ...rest|
                    return impl(rest, out + letter)
        return impl(in, "")

    match in 
        case |letter if alphanum(letter), ...rest|
            (str, rest) = strings.TakeWhile(|letter, ...rest|, (el) => isAlphanum(el))
            return |tokenizeAlphanum(str), ...Tokenize(rest)|
        case |'"', ...rest|
            (str, rest) = parseString(rest)
            return |str, ...Tokenize(rest)| 
        case |'(', ...rest|
            return |Token.OpenParen(), ...Tokenize(rest)|
        case |')', ...rest|
            return |Token.CloseParen(), ...Tokenize(rest)|
        case |' ', ...rest|
            return Tokenize(rest)
        default
            panic("bad char")



def Lex(in |Token|) [AST]
    def list(in |Token|) (AST, token)
        def impl(in |Token|, ast [AST]) (AST, |Token|)   
            match in
                case |Token.OpenParen(), ...rest|
                    (l, rest) = list(rest)
                    return impl(rest, [...ast, l])
                case |Token.CloseParen(), ...rest|
                    return (AST.List(ast), rest)
                case |Token.Value(val), ...rest|
                    return impl(rest, [...ast, AST.Value(val)])
        return impl(in, [])
    match in
        case |Token.OpenParen(), ...rest|
            (first, rest) = list(in)
            return |first, ...Lex(rest)|
        case |Token.CloseParen(), ...rest|
            panic("invalid syntax, closed paren without matching open paren")
        case |Token.Value(value), ...rest|
            return |AST.Value(value), ...Lex(rest)|
        case ||
            return ||



def (l Lambda) BetaReduce(args &[Value]) AST
    dict = zip(stream(l.Unbound), map(stream(args), (el) => copy(el)))
        then dicts.Collect()

    def impl(ast AST, bound &{string: Value}) AST
        if bound == {}
            return ast 
        match ast
            case List(vals)
                return vals
                    then stream()
                    then map((el) => impl(el, bound))
                    then lists.Collect()
                    then AST.List()
            case Atom(value)
                match value 
                    case None 
                        return Value.None()
                    case Identifier(el)
                        match bound[el]
                            case some(val) 
                                return val
                            case none 
                                return el
                    case Lambda({unbound, body})
                        bound = stream(unbound)
                            then reduce(copy(bound), (bound, el) => delete(bound, el))
                        body = impl(body, bound)
                        return Value.Lambda({unbound, body})
    return impl(l.Body, dict)


def Eval(ast AST) Value 
    def add(l &[AST]) Value 
        val = Eval(l[1])
        if val is Int(i)
            return l
                then lists.Sub(2, len(l))
                then map((el) => Eval(el))
                then reduce(i, (a, b) => a + b)
                then Value.Int()
        if val is String(s)   
            return l 
                then lists.Sub(2, len(l))
                then map((el) => Eval(el))
                then reduce(s, (a, b) => a + b)
                then Value.String()
        else 
            panic("add must be on ints or strings")
    def eq(l &[AST]) Value 
        return l[1] == l[2]
    def sub(l &[AST]) Value 
        if l[1] is Int(a)
            if l[2] is Int(b)
                return Value.Int(a - b)
            else
                panic("second operand bad for sub, must be int")
        else
            panic("first operand bad for sub, must be int")
    def mul(l &[AST]) Value
        if l[1] is Int(a)
            if l[2] is Int(b)
                return Value.Int(a * b)
            else
                panic("second operand bad for sub, must be int")
        else
            panic("first operand bad for sub, must be int")
    def div(l &[AST]) Value
        if l[1] is Int(a)
            if l[2] is Int(b)
                return Value.Int(a / b)
            else
                panic("second operand bad for sub, must be int")
        else
            panic("first operand bad for sub, must be int")
    



            



    def impl(ast AST, defines {string: Value}) Value 
        def call(l [AST], defines {string: Value}) Value
            match l[0]
                case "+"
                    return add(l)
                case "/"
                    return div(l)
                case "-"
                    return sub(el)
                case "*"
                    return mul(el)
                case "define"
                    return mul()
        match ast 
            case AST.Value(v):
                return v 
            case AST.List(l):
                if l == []
                    panic("list too short!")
                return call(l, defines)
    return impl(ast, {})

            