module streams



def Chain[A](a |A|, b |A|) |A|
    def impl(a |A|, b |A|, done bool) |A|   
        if not done
            match a
                case |el, ...rest|
                    return |el, ...impl(rest, b, false)|
                case ||
                    return impl(||, b, true)
        else
            match b
                case |el, ...rest|
                    return |el, impl(||, rest, true)
                case ||
                    return ||


