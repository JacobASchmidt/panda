module sets


def Add[A](a {A}, el A) {A}
    return {...a, el}

def Collect[A](a |A|) {A}
    return reduce(a, make({A}), (set, el) => Add(set, el))

def Union[A](a {A}, b {A}) {A}
    return values(b)
        then reduce(a, (a, el) => {...a, el}))

def Intersection[A](a {A}, b &{A}) {A}
    return values(a)
        then filter((el) => el in b)
        then Collect()

def Difference[A](a {A}, b &{A}) {A}
    return values(a)
        then filter((el) => el not in b)
        then Collect()
    
def CartesianProduct[A, B](a &{A}, b &{B}) |(A, B)|
    return stream(a)
        then map((aEl) => stream(b) then map((bEl) => (copy(a_el), copy(b_el))))
        